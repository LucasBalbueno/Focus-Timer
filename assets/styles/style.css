* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* MÉTODO DE CORES HSL */
/* SETAMOS UMA VARIÁVEL PARA MUDAR A COR PRINCIPAL DAS OUTRAS VARIAVEIS, CHAMAMOS ESSA VARIAVEL DE HUE */
:root {
    --hue: 194;
    --bg-color: hsl(var(--hue), 5%, 7%);
    --text-color: hsl(var(--hue), 40%, 98%);
    --primary-color: hsl(var(--hue), 100%, 63%);
    --controls-bg-color: hsl(var(--hue), 0%, 14%);
    /* DUPLICAMOS A COR DA VARIAVEL ABAIXO POIS FUTURAMENTE O --text-color IRÁ MUDAR DE COR QUANDO ALTERAR ENTRE MODOS LIGHT/DARK */
    --button-secondary: hsl(var(--hue), 40%, 98%);

    /* O CLAMP É UMA PROPRIEDADE CSS PARA DEFINIR UM VALOR PADRÃO, UM VALOR MÍNIMO E UM VALOR MÁXIMO. É UMA FORMA DE DEIXAR O TEXTO RESPONSIVO NATURALMENTE */
    font-size: clamp(40%, 1% + 2vw, 62,5%);
}

/* QUANDO A TAG hmtl TIVER A CLASSE light, AS VARIAVEIS DE COR MUDARÃO, ASSIM COLOCANDO O MODO CLARO. */
html.light {
    --text-color: hsl(var(--hue), 5%, 7%);
    --bg-color: hsl(var(--hue), 40%, 98%);
}

/* QUANDO A TAG html ESTIVER COM A CLASSE light ATIVADA, UM DOS BOTÕES SOME. */
html.light .ph-sun,
html:not(.light)  .ph-moon {
    display: none;
}

#toggle-mode {
    position: absolute;
    right: 3.2rem;
    top: 3.2rem;
    font-size: 3.2rem;
    line-height: 0;

    color: var(--text-color);
}

/* AQUI CRIAMOS UMA CLASSE APENAS PARA LEITORES DE TELA, COM O OBJETIVO DE CRIAR ACESSIBILIDADE. sr-only = Screen Reader Only*/
/* QUANDO ATIVARMOS O MODO NARRADOR/LEITOR DE TELA NO SISTEMA OPERACIONAL, ESSAS ALTERAÇÕES SERÃO APLICADAS E O TEXTO DA TAG HTML SERÁ LIDO. */
.sr-only {
    width: 1px;
    height: 1px;
    position: absolute;
    overflow: hidden;

    margin: -1px;
    padding: 0;
    border: 0;
    appearance: none;
}

body {
    background-color: var(--bg-color);
    color: var(--text-color);

    display: grid;
    height: 100vh;

    /* ALINHAR TUDO AO CENTRO DA TELA COM O DISPLAY GRID/FLEXBOX */
    place-content: center;
}

#app {
    display: grid;

    /* ALINHA VERTICALMENTE */
    justify-items: center;
}


/* CRIAMOS UMA CLASSE UTILITÁRIA, ELA TEM APENAS UM PROPÓSITO, UMA ESTILIZAÇÃO. APLICAMOS ELA DIRETAMENTE NO ELEMENTO */
.flex {
    display: flex;
}

#timer {
    font-size: 9.6rem;
    font-weight: bold;
    font-family: sans-serif;
}

#controls {
    margin-top: 1.6rem;
    padding: 2.2rem 4rem;
    gap: 1.6rem;
    background-color: var(--controls-bg-color);
    border-radius: 999rem;
}

button{
    background-color: transparent;
    border: 0;
    color: var(--primary-color);
    cursor: pointer;
    font-size: 6.4rem;
}

.secondaryColor {
    color: var(--button-secondary);
}

/* CONTROLS */
/* INCLUIMOS O ESTILO DE DESAPARECER O ELEMENTO PARA NAS CLASES ABAIXO PARA QUANDO A CLASSE running FOR ATIVADA. */
/* USAMOS A PSEUDOCLASSE not() PARA QUANDO A TAG HTML NÃO TIVER AS CLASSES PASSADAS COMO PARÂMETRO, O ESTILO DE DESAPARECER TAMBÉM SERÁ APLICADO. */
.running .ph-play-circle,
.running .ph-timer,
.music-on .ph-speaker-none,
html:not(.running) .ph-pause-circle,
html:not(.running) .ph-stop-circle,
html:not(.music-on) .ph-speaker-high {
    display: none;
}